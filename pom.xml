<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
            http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.emergon</groupId>
    <artifactId>JSFTemplate</artifactId>
    <version>1.0.Final</version>
    <!--indicates the project is a “web” project, and that the
    project’s contents will be assembled into a web archive.-->
    <packaging>war</packaging>

    <name>JSFTemplate</name>

    <properties>
        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
        <!--sets the encoding that the source files are in-->
        <!--otherwise it would default to the system default encoding--> 
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--sets both the version of Java used in the .java source
        files as well as the byte code output in the .class files. Without
        setting this, Maven defaults to the oldest version possible, and
        sometimes even a lower version than that.-->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <!--older versions of Java EE required
        the /WEB-INF/web.xml to be present. Even though this has not been
        required any more since Java EE 6,
        Maven still checks for this file to be present in some IDEs. 
        Setting this to false prevents this unnecessary check.-->
        <failOnMissingWebXml>false</failOnMissingWebXml>
    </properties>
    
    <dependencies>
        <!--declares a dependency on the Java EE 8 API, and makes sure all the Java EE
        types like @Named are known to the compiler. This dependency
        is set to provided" since those types are already provided by the
        target runtime, which is in our case Wildfly. They will then only be
        used to compile the source code against and won’t be included in the generated .war-->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>8.0</version>
            <scope>provided</scope>
        </dependency>
        <!--H2 is an in-memory SQL database. It’s an embedded database useful for quickly
        modeling and testing JPA entities, certainly in combination with autogenerated SQL
        tables based on JPA entities. Adding H2 to your web application project is a matter of
        adding the following dependency to the <dependencies> section of the pom.xml-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.196</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArguments>
                        <endorseddirs>${endorsed.dir}</endorseddirs>
                    </compilerArguments>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <!--            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${endorsed.dir}</outputDirectory>
                            <silent>true</silent>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>javax</groupId>
                                    <artifactId>javaee-endorsed-api</artifactId>
                                    <version>8.0</version>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->
        </plugins>
    </build>

</project>
